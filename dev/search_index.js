var documenterSearchIndex = {"docs":
[{"location":"PhysiologyPlottingMethods/#PhysiologyPlotting-methods","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting methods","text":"","category":"section"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"To load PyPlot as a backend, export it with ","category":"page"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"using PhysiologyPlotting\nusing PyPlot","category":"page"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"plot_experiment(axis::T, exp::Experiment;\n    channels=1, sweeps = :all, \n    yaxes=true, xaxes=true, #Change this, this is confusing\n    xlims = nothing, ylims = nothing,\n    color = :black, cvals = nothing, clims = (0.0, 1.0), #still want to figure out how this wil work\n    ylabel = nothing, xlabel = nothing,\n    linewidth = 1.0, \n    kwargs...\n) where T","category":"page"},{"location":"PhysiologyPlottingMethods/#PhysiologyPlotting.plot_experiment-Union{Tuple{T}, Tuple{T, Experiment}} where T","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting.plot_experiment","text":"plot_experiment(axis::T, exp::Experiment; kwargs...)\nplot_experiment(axis::Vector{T}, exp::Experiment; kwargs...)\nplot_experiment(exp::Experiment; kwargs...)\n\nPlot the experiment data on the given axis or axes.\n\nArguments\n\naxis: The axis to plot the data on.\nexp: The Experiment object containing the data.\n\nKeyword Arguments\n\nchannels: Channels to plot (default: 1).\nsweeps: Sweeps to plot (default: :all).\nyaxes: Whether to display the y-axis (default: true).\nxaxes: Whether to display the x-axis (default: true).\nxlims: X-axis limits (default: nothing).\nylims: Y-axis limits (default: nothing).\ncolor: Color or colormap for the plot (default: :black).\ncvals: Custom color values (default: nothing).\nclims: Color limits for colormap (default: (0.0, 1.0)).\nylabel: Y-axis label (default: nothing).\nxlabel: X-axis label (default: nothing).\nlinewidth: Line width for the plot (default: 1.0).\nlayout: Layout for multiple plots (default: nothing).\nchannels: Channels to plot (default: nothing).\nst: Style of the plot, can be :trace, :waveplot, or :trace3D (default: :trace).\n\nkwargs: These are keyword arguments common to PyPlot.jl.    Please see: https://github.com/JuliaPy/PyPlot.jl or https://matplotlib.org/stable/index.html   for further documentation\n\nReturns\n\nThe plot object.\n\nExamples\n\nplot_experiment(axis, my_experiment; channels=1, sweeps=:all)\n\n\n\n\n\n","category":"method"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"add_scalebar(axis, loc::Tuple{T,T}, dloc::Tuple{T,T};\n    fontsize=10.0, lw=3.0,\n    xlabeldist=30.0, ylabeldist=15.0,\n    xunits=\"ms\", yunits=\"μV\",\n    xconvert=1000.0, yconvert=1.0, #this converts the units from x and y labels. x should be in ms\n    xround=true, yround=true,\n    kwargs...\n) where {T<:Real}","category":"page"},{"location":"PhysiologyPlottingMethods/#PhysiologyPlotting.add_scalebar-Union{Tuple{T}, Tuple{Any, Tuple{T, T}, Tuple{T, T}}} where T<:Real","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting.add_scalebar","text":" add_scalebar(axis, loc::Tuple{T,T}, dloc::Tuple{T,T}; \n           fontsize=10.0, lw=3.0, xlabeldist=30.0, ylabeldist=15.0,\n           xunits=\"ms\", yunits=\"μV\", xconvert=1000.0, yconvert=1.0, xround=true, yround=true, kwargs...) where {T<:Real}\n\nAdd a scale bar to the plot at the specified location.\n\nArguments\n\naxis: The axis to add the scale bar to.\nloc: The (x, y) location where the scale bar starts.\ndloc: The (dx, dy) dimensions of the scale bar.\n\nKeyword Arguments\n\nfontsize: Font size for the scale bar labels (default: 10.0).\nlw: Line width of the scale bar (default: 3.0).\nxlabeldist: Distance for the x-axis label (default: 30.0).\nylabeldist: Distance for the y-axis label (default: 15.0).\nxunits: Units for the x-axis (default: \"ms\").\nyunits: Units for the y-axis (default: \"μV\").\nxconvert: Conversion factor for x-axis units (default: 1000.0).\nyconvert: Conversion factor for y-axis units (default: 1.0).\nxround: Whether to round the x-axis label (default: true).\nyround: Whether to round the y-axis label (default: true).\n\nExamples\n\nadd_scalebar(axis, (0.0, 0.0), (1.0, 1.0))\n\n\n\n\n\n\n","category":"method"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"add_sig_bar(axes, x::Real, y::Real; \n    level = \"*\", color = :black, \n    pointer = false,\n    pointer_dx = 0.5,\n    pointer_ylims = [2.0, 3.0], \n    lw = 1.0, fs = 12.0, ls = \"solid\"\n)   ","category":"page"},{"location":"PhysiologyPlottingMethods/#PhysiologyPlotting.add_sig_bar-Tuple{Any, Real, Real}","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting.add_sig_bar","text":" add_sig_bar(axes, x::Real, y::Real; \n            level = \"*\", color = :black, pointer = false,\n            pointer_dx = 0.5, pointer_ylims = [2.0, 3.0], \n            lw = 1.0, fs = 12.0, ls = \"solid\")\n\nadd_sig_bar(axis, xs::Vector{T}, ys::Vector{T}; kwargs...) where T <: Real\n\nAdd a significance bar to the plot at the specified x and y coordinates.\n\nArguments\n\naxes: The axis or axes to add the significance bar to.\nx, y: The x and y coordinates for the significance bar.\n\nKeyword Arguments\n\nlevel: Significance level (default: \"*\").\ncolor: Color of the significance bar (default: :black).\npointer: Whether to include a pointer (default: false).\npointer_dx: Horizontal distance for the pointer (default: 0.5).\npointer_ylims: Vertical limits for the pointer (default: [2.0, 3.0]).\nlw: Line width (default: 1.0).\nfs: Font size (default: 12.0).\nls: Line style (default: \"solid\").\n\nExamples\n\nadd_sig_bar(axis, 1.0, 2.0; level=\"*\")\n\n\n\n\n\n","category":"method"},{"location":"PhysiologyPlottingMethods/","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting Methods","text":"draw_axes_border(ax; lw = 2.5, color = :black)","category":"page"},{"location":"PhysiologyPlottingMethods/#PhysiologyPlotting.draw_axes_border-Tuple{Any}","page":"PhysiologyPlotting Methods","title":"PhysiologyPlotting.draw_axes_border","text":" draw_axes_border(ax; lw = 2.5, color = :black)\n\nDraw a border around the axes.\n\nArguments\n\nax: The axis to draw the border around.\n\nKeyword Arguments\n\nlw: Line width (default: 2.5).\ncolor: Color of the border (default: :black).\n\nExamples\n\ndraw_axes_border(ax; lw=2.5)\n\n\n\n\n\n","category":"method"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology-Methods","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"","category":"section"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"using ElectroPhysiology","category":"page"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"These methods become available after this command is run.","category":"page"},{"location":"ElectroPhysiologyMethods/#Stimulus-Protocols","page":"ElectroPhysiology Methods","title":"Stimulus Protocols","text":"","category":"section"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"Stimulus","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.Stimulus","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.Stimulus","text":"Stimulus\n\nAn abstract type representing a stimulus in a physiological experiment.\n\nSubtypes of Stimulus should implement specific stimulus types and their corresponding parameters.\n\n\n\n\n\n","category":"type"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"Flash","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.Flash","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.Flash","text":"Flash <: Stimulus\n\nA Flash is a subtype of Stimulus representing a flash stimulus in a physiological experiment.\n\nFields\n\nintensity: A Real value indicating the intensity of the flash.\n\nConstructors\n\nFlash(): Creates a default Flash object with an intensity of 0.0.\nFlash(intensity::Real): Creates a Flash object with the specified intensity.\n\n\n\n\n\n","category":"type"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"StimulusProtocol","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.StimulusProtocol","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.StimulusProtocol","text":"StimulusProtocol{T, S} where {T <: Real, S <: Stimulus}\n\nA mutable struct representing a stimulus protocol for physiological data.\n\nFields\n\ntype: A Stimulus object describing the type of stimulus applied during the experiment.\nchannelName: A Union{String, Int64} representing the name or number of the channel where the stimulus is applied.\ntimestamps: A Vector{Tuple{T, T}} storing the start and end timestamps of the stimulus events.\n\nConstructors\n\nStimulusProtocol(): Creates a default StimulusProtocol object with Flash() stimulus, \"Nothing\" channel, and a single (0.0, 0.0) timestamp.\nStimulusProtocol(stimulus_channel::String): Creates a StimulusProtocol object with Flash() stimulus, the provided stimulus_channel, and a single (0.0, 0.0) timestamp.\nStimulusProtocol(swp::Int64): Creates a StimulusProtocol object with Flash() stimulus, \"Nothing\" channel, and swp number of (0.0, 0.0) timestamps.\nStimulusProtocol(stimulus_channel::String, swp::Int64): Creates a StimulusProtocol object with Flash() stimulus, the provided stimulus_channel, and swp number of (0.0, 0.0) timestamps.\n\nExamples\n\nstim1 = StimululsProtocol()\nstim_channel = StimulusProtocol(\"IN 3\")\nstim_sweep = StimulusProtocol(3)\nstim_sweep_channel = StimululsProtocol(3, \"IN 3\")\nstim_tstamp = StimululsProtocol((0.0, 0.01))\nstim_type_time_channel = StimulusProtocol(Flash(), \"IN 3\", (0.00, 0.01))\n\n\n\n\n\n","category":"type"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"extractStimulus","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.extractStimulus","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.extractStimulus","text":"extractStimulus(abfInfo::Dict{String, Any}; stimulus_name::String=\"IN 7\", stimulus_threshold::Float64=2.5)\nextractStimulus(abf_path::String; kwargs...)\n\nExtract the stimulus information from the given abfInfo dictionary and returns a StimulusProtocol object containing stimulus timestamps.\n\nArguments\n\nabfInfo: A dictionary containing information about the physiological data.\nstimulus_name: (Optional) The name of the stimulus channel. Default is \"IN 7\".\nstimulus_threshold: (Optional) The threshold for detecting stimulus events in the waveform. Default is 2.5.\n\nReturns\n\nA StimulusProtocol object containing the stimulus timestamps for each trial.\n\nExamples\n\nabfInfo = loadABF(\"path/to/abf/file\")\nstimuli = extractStimulus(abfInfo)\n\nstimuli = extractStimulus(\"path/to/abf/file\")\n\n\n\n\n\n","category":"function"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"setIntensity","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.setIntensity","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.setIntensity","text":"setIntensity(stimulus_protocols::StimulusProtocol{T, Flash}, photons::Vector{T}) where T<:Real\nsetIntensity(stimulus_protocols::StimulusProtocol{T, Flash}, photon::T) where T<:Real\n\nThis allows the intensity of the stimulus protocol (or multiple stimulus protocols be set). \n\nArguments\n\nstimulus_protocol::StimulusProtocol{T, S} where S <: Flash: A stimulus protocol \nphotons::Vector: a vector of numbers representing the photon amount. \n\nExamples\n\n\n\n\n\n\n\n","category":"function"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"getIntensity","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.getIntensity","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.getIntensity","text":"setIntensity(stimulus_protocols::StimulusProtocol{T, Flash}, photons::Vector)\n\nThis allows the intensity of the stimulus protocol (or multiple stimulus protocols be set). \n\nArguments\n\nstimulus_protocol::StimulusProtocol{T, S} where S <: Flash: A stimulus protocol \nphotons::Vector: a vector of numbers representing the photon amount. \n\n\n\n\n\n","category":"function"},{"location":"ElectroPhysiologyMethods/#Structs","page":"ElectroPhysiology Methods","title":"Structs","text":"","category":"section"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"Experiment","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.Experiment","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.Experiment","text":"Experiment{T}\n\nA mutable struct representing a physiological experiment.\n\nFields\n\nHeaderDict: A dictionary containing header information for the experiment.\ndt: A Real value representing the time step between data points.\nt: A vector containing the time points of the experiment.\ndata_array: A 3-dimensional array containing the experimental data.\nchNames: A vector of strings representing the names of the channels.\nchUnits: A vector of strings representing the units of the channels.\nchGains: A vector of Real values representing the Gains values of the channels.\nstimulus_protocol: A StimulusProtocol{T} object containing the stimulus protocol information.\n\nConstructors\n\nExperiment(data_array::AbstractArray; data_idx = 2): Create an Experiment object from an input data array with an optional data index.\nExperiment(time::Vector, data_array::Array{T, 3}) where T <: Real: Create an Experiment object from an input time vector and data array.\n\n\n\n\n\n","category":"type"},{"location":"ElectroPhysiologyMethods/#Functions","page":"ElectroPhysiology Methods","title":"Functions","text":"","category":"section"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"pad(trace::Experiment{T}, n_add::Int64; position::Symbol=:post, val::T=0.0) where {T <: Real}","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.pad-Union{Tuple{T}, Tuple{Experiment{T}, Int64}} where T<:Real","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.pad","text":"pad(trace::Experiment{T}, n_add::Int64; position::Symbol=:post, val::T=0.0) where {T <: Real}\npad!(trace::Experiment{T}, n_add::Int64; position::Symbol=:post, val::T=0.0) where {T <: Real}\n\nPad the data in a given Experiment object by adding elements with a specified value val either before or after the existing data.  This function returns a new Experiment object with the padded data. pad! is the inplace version, while pad creates a new experiment\n\nArguments\n\ntrace: An Experiment{T} object containing the experimental data.\nn_add: The number of elements to add.\nposition: (Optional) A symbol specifying where to add the elements. Can be :pre (before) or :post (after). Default is :post.\nval: (Optional) The value to use for padding. Default is 0.0.\n\nExample\n\nexp = Experiment(data_array)\npadded_exp = pad(exp, 100, position=:pre, val=0.0)\n\n\n\n\n\n","category":"method"},{"location":"ElectroPhysiologyMethods/#Experiment-readers","page":"ElectroPhysiology Methods","title":"Experiment readers","text":"","category":"section"},{"location":"ElectroPhysiologyMethods/","page":"ElectroPhysiology Methods","title":"ElectroPhysiology Methods","text":"readABF(::Type{T}, abf_data::Union{String,Vector{UInt8}};\n    trials::Union{Int64,Vector{Int64}}=-1,\n    channels::Union{Int64, String, Vector{String}}=[\"Vm_prime\", \"Vm_prime4\"],\n    average_trials::Bool=false,\n    stimulus_name::Union{String, Vector{String}, Nothing}=\"IN 7\",  #One of the best places to store digital stimuli\n    stimulus_threshold::T=2.5, #This is the normal voltage rating on digital stimuli\n    warn_bad_channel=false, #This will warn if a channel is improper\n    flatten_episodic::Bool=false, #If the stimulation is episodic and you want it to be continuous\n    time_unit=:s, #The time unit is s, change to ms\n) where {T<:Real}","category":"page"},{"location":"ElectroPhysiologyMethods/#ElectroPhysiology.readABF-Union{Tuple{T}, Tuple{Type{T}, Union{String, Vector{UInt8}}}} where T<:Real","page":"ElectroPhysiology Methods","title":"ElectroPhysiology.readABF","text":"readABF(::Type{T}, abf_data::Union{String,Vector{UInt8}};\n    trials::Union{Int64,Vector{Int64}}=-1,\n    channels::Union{Int64, Vector{String}}=[\"Vm_prime\", \"Vm_prime4\"],\n    average_trials::Bool=false,\n    stimulus_name::Union{String, Vector{String}, Nothing}=\"IN 7\",\n    stimulus_threshold::T=2.5,\n    warn_bad_channel=false,\n    flatten_episodic::Bool=false,\n    time_unit=:s,\n) where {T<:Real}\n\nRead an Axon Binary File (ABF) and return an Experiment object. The function extracts data for the specified trials and channels, and optionally averages trials or flattens episodic data.\n\nArguments\n\nabf_data: A String representing the ABF file path or a Vector{UInt8} containing the ABF file content.\ntrials: An Int64 or a Vector{Int64} specifying the trials to extract. Default is -1 (all trials).\nchannels: An Int64 or a Vector{String} specifying the channels to extract. Default is [\"Vmprime\", \"Vmprime4\"].\naverage_trials: A Bool specifying whether to average the trials. Default is false.\nstimulus_name: A String, Vector{String}, or Nothing specifying the stimulus name(s). Default is \"IN 7\".\nstimulus_threshold: A threshold value of type T for the stimulus. Default is 2.5.\nwarn_bad_channel: A Bool specifying whether to warn if a channel is improper. Default is false.\nflatten_episodic: A Bool specifying whether to flatten episodic stimulation to be continuous. Default is false.\ntime_unit: A Symbol specifying the time unit. Default is :s (seconds).\n\nReturns\n\nAn Experiment object containing the extracted data, along with metadata.\n\nExample\n\nexp = readABF(Float32, \"path/to/abf_file.abf\")\n\n\n\n\n\n","category":"method"},{"location":"roadmap/#Roadmap","page":"Roadmap","title":"Roadmap","text":"","category":"section"},{"location":"roadmap/","page":"Roadmap","title":"Roadmap","text":"Version 1.0: Can open, plot, and analyze datafiles from .ABF files. ","category":"page"},{"location":"roadmap/","page":"Roadmap","title":"Roadmap","text":"Notebooks are included to help analyze some electroretinography data. To install notebooks use this link: https://github.com/mattar13/PhysiologyInterface.jl","category":"page"},{"location":"roadmap/#ElectroPhysiology","page":"Roadmap","title":"ElectroPhysiology","text":"","category":"section"},{"location":"roadmap/#Physio","page":"Roadmap","title":"Physio","text":"","category":"section"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/#Making-an-analysis-environment-(OPTIONAL)","page":"Installation","title":"Making an analysis environment (OPTIONAL)","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"While it is not necessary to create a seperate environment, this helps to isolate packages and prevent cross-contamination of packages. ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"In order to create a new environment use this code: ","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.activate(\"Analysis\")","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"Each time you run julia you will need to run this line first. ","category":"page"},{"location":"installation/#Installing-ElectroPhysiology.jl","page":"Installation","title":"Installing ElectroPhysiology.jl","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.add(\"ElectroPhysiology\")","category":"page"},{"location":"installation/#Installing-the-PhysiologyAnalysis.jl-toolkit","page":"Installation","title":"Installing the PhysiologyAnalysis.jl toolkit","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.add(\"PhysiologyAnalysis\")","category":"page"},{"location":"installation/#Installing-the-PhysiologyPlotting.jl-toolkit","page":"Installation","title":"Installing the PhysiologyPlotting.jl toolkit","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg; Pkg.add(\"PhysiologyPlotting\")","category":"page"},{"location":"#ElectroPhysiology.jl-Introduction","page":"Introduction","title":"ElectroPhysiology.jl Introduction","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Electrophysiology is defined the study of the electrical nature of cells in an organism. Much of the time it deals with muscular or neural physiology, however other cells have conductive behavior as well. As the field of neuroscience develops, it will draw more heavily on available computational systems. This package aims to take ","category":"page"},{"location":"#Package-composition","page":"Introduction","title":"Package composition","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"This module is composed of several different modules. You can load some or all of the modules based on what you need. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"ElectroPhysiology.jl provides the basic reading and access to electrophysiology data\nElectroPhysiology Methods\nPhysiologyAnalysis.jl provides some analysis tools and plotting tools for analysis\nPhysiologyAnalysis Methods\nPhysiologyPlotting.jl provides plotting and visualization tools. \nPhysiologyPlotting Methods","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"In general, if exporting PhysiologyAnalysis.jl or PhysiologyModeling.jl, ElectroPhysiology.jl doesn't need to be exported, and many of the things exported with ElectroPhysiology.jl will be left \"under the hood\". However if some of the tools included in ElectroPhysiology.jl are needed (see ElectroPhysiology tools), then it may be best to import both. ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"If you would like tutorials, look into the tutorial package here with help on how to use the software","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"","category":"page"},{"location":"tutorial/#ElectroPhysiology.jl-Tutorial","page":"Tutorial","title":"ElectroPhysiology.jl Tutorial","text":"","category":"section"},{"location":"tutorial/#A-tutorial-is-provided-in-the-github-repo","page":"Tutorial","title":"A tutorial is provided in the github repo","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"https://github.com/mattar13/PhysiologyInterface.jl","category":"page"},{"location":"tutorial/#The-experiment-is-the-universal-experiment-container","page":"Tutorial","title":"The experiment is the universal experiment container","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"At the base of the ElectroPhysiology.jl package (PhysigologyAnalysis.jl, and PhysiologyModeling.jl). Is the Experiment object: Experiment. This object contains all relevant information about the data. The easiest way to get your data into an Experiment is to extract it. ","category":"page"},{"location":"tutorial/#Opening-Axon-Binary-Format-files-(.abf)","page":"Tutorial","title":"Opening Axon Binary Format files (.abf)","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Currently, this package only opens this can only be done through ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"test_file = \"test\\\\to_filter.abf\"\ndata = readABF(test_file)\nprintln(size(data))\n","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"readABF(::Type{T}, abf_data::Union{String,Vector{UInt8}};\n    trials::Union{Int64,Vector{Int64}}=-1,\n    channels::Union{Int64, String, Vector{String}}=[\"Vm_prime\", \"Vm_prime4\"],\n    average_trials::Bool=false,\n    stimulus_name::Union{String, Vector{String}, Nothing}=\"IN 7\",  #One of the best places to store digital stimuli\n    stimulus_threshold::T=2.5, #This is the normal voltage rating on digital stimuli\n    warn_bad_channel=false, #This will warn if a channel is improper\n    flatten_episodic::Bool=false, #If the stimulation is episodic and you want it to be continuous\n    time_unit=:s, #The time unit is s, change to ms\n) where {T<:Real}","category":"page"},{"location":"tutorial/#Modification-of-Experiment-files","page":"Tutorial","title":"Modification of Experiment files","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Once the data is open. We can do several things to modify it. ","category":"page"},{"location":"tutorial/#Extracting-data-and-metadata-from-a-system-of-file-names","page":"Tutorial","title":"Extracting data and metadata from a system of file names","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"PhysiologyAnalysis.jl has some methods that make the extraction of file information easier. These are really just convienance functions. Because some experiments are really different, these may or may not be helpful. ","category":"page"},{"location":"tutorial/#Making-a-dataframe-that-includes-all-trials-in-a-experiment","page":"Tutorial","title":"Making a dataframe that includes all trials in a experiment","text":"","category":"section"},{"location":"PhysiologyAnalysisMethods/#PhysiologyAnalysis-methods","page":"PhysiologyAnalysis Methods","title":"PhysiologyAnalysis methods","text":"","category":"section"},{"location":"PhysiologyAnalysisMethods/","page":"PhysiologyAnalysis Methods","title":"PhysiologyAnalysis Methods","text":"calculate_threshold(x::Array{T, N}; Z = 4.0, dims = -1) where {T <: Real, N}","category":"page"},{"location":"PhysiologyAnalysisMethods/#PhysiologyAnalysis.calculate_threshold-Union{Tuple{Array{T, N}}, Tuple{N}, Tuple{T}} where {T<:Real, N}","page":"PhysiologyAnalysis Methods","title":"PhysiologyAnalysis.calculate_threshold","text":"calculate_threshold(vm_arr::AbstractArray; Z = 4, dims = -1)\n\nFinds the threshold of a trace by calculating the average and then adding the 4x the standard deviation.  If using a differential solution, make sure dt is set, otherwise the standard deviation will be unevenly sampled\n\n\n\n\n\n","category":"method"}]
}
